{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "GCP BBOS / Application / network infrastructure",

    "Parameters": {
      "AZ": {
          "Description": "Avalability zone to create VPC private and public subnets",
          "Type": "AWS::EC2::AvailabilityZone::Name"
      }
    },

    "Resources": {

        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
                         { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
            }
        },

        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Ref": "AZ" },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [{ "Key": "Name", "Value":
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "-public"
                      ]
                    ]
                  }
                }
              ]
            }
        },

        "PrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Ref": "AZ" },
                "CidrBlock": "10.0.1.0/24",
                "Tags": [{ "Key": "Name", "Value":
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "-private"
                      ]
                    ]
                  }
                }
              ]
            }
        },

        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
                         { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
            }
        },

        "AttachInternetGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },

        "NATGateway" : {
          "DependsOn" : "AttachInternetGateway",
          "Type" : "AWS::EC2::NatGateway",
          "Properties" : {
            "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
            "SubnetId" : { "Ref" : "PublicSubnet"}
          }
        },

        "EIP" : {
          "Type" : "AWS::EC2::EIP",
          "Properties" : {
            "Domain" : "vpc"
          }
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
                         { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
            }
        },

        "InternetGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachInternetGateway",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },

        "SubnetPublicRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
                         { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
            }
        },

        "NATGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": { "Ref": "NATGateway" }
            }
        },

        "SubnetPrivateRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnet" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },

        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
                         { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
            }
        },

        "InboundSSHNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "22", "To": "22" }
            }
        },

        "InboundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "105",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "80", "To": "80" }
            }
        },

        "InboundHTTPNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "110",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "8080", "To": "8080" }
            }
        },
        "InboundHTTPSNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "130",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "443", "To": "443" }
            }
        },

        "InboundNtpResponseUdpPortNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "120",
                "Protocol": "17",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "123", "To": "123" }
            }
        },

        "InboundNtpResponseTcpPortNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "125",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "123", "To": "123" }
            }
        },

        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "900",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "1024", "To": "65535" }
            }
        },

        "OutBoundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "80", "To": "80" }
            }
        },

        "OutboundSSHNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "22", "To": "22" }
            }
        },

        "OutBoundHTTPNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "105",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "8080", "To": "8080" }
            }
        },

        "OutBoundHTTPSNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "130",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "443", "To": "443" }
            }
        },

        "OutBoundNtpUdpNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "115",
                "Protocol": "17",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "123", "To": "123" }
            }
        },

        "OutBoundNtpTcpNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "120",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "123", "To": "123" }
            }
        },

        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "900",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "1024", "To": "65535"
                }
            }
        },

        "SubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "NetworkAclId": { "Ref": "NetworkAcl" }
            }
        }
    },

    "Outputs": {
      "PrivateSubnetId" : {
          "Description": "Id of VPC Private Subnet",
          "Value": { "Ref": "PrivateSubnet" }
      },
      "PublicSubnetId" : {
          "Description": "Id of VPC Public Subnet",
          "Value": { "Ref": "PublicSubnet" }
      },
        "VPC" : {
            "Description": "VPC ID",
            "Value": { "Ref": "VPC" }
        }
    }
}